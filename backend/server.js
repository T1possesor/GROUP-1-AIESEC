const express = require('express');
const mysql = require('mysql');
const cors = require('cors');

const app = express();
app.use(cors());
app.use(express.json());

// K·∫øt n·ªëi MySQL
const db = mysql.createConnection({
  host: '127.0.0.1',
  user: 'root',
  password: 'your_password', // ‚Üê thay b·∫±ng m·∫≠t kh·∫©u th·∫≠t c·ªßa b·∫°n
  database: 'app2n'
});

db.connect(err => {
  if (err) {
    console.error('‚ùå K·∫øt n·ªëi MySQL th·∫•t b·∫°i:', err.message);
    return;
  }
  console.log('‚úÖ ƒê√£ k·∫øt n·ªëi t·ªõi MySQL Workbench!');
});

// API login
app.post('/api/login', (req, res) => {
  const { username, password } = req.body;

  const query = `
    SELECT 
      ID_Nguoidung, 
      Tendangnhap, 
      Vaitro, 
      Email
    FROM TaiKhoanNguoiDung
    WHERE Tendangnhap = ? AND Matkhau = ?
    LIMIT 1
  `;

  db.query(query, [username, password], (err, results) => {
    if (err) return res.status(500).json({ success: false, message: err.message });

    if (results.length === 0) {
      return res.status(401).json({ success: false, message: 'T√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u sai' });
    }

    const user = results[0];

    // üëâ Ph√¢n lo·∫°i ID: Kh√°ch h√†ng ho·∫∑c nh√¢n vi√™n
    if (user.Vaitro === "KhachHang") {
      user.ID_KH = user.ID_Nguoidung;
    } else {
      user.ID_NV = user.ID_Nguoidung;
    }

    delete user.ID_Nguoidung; // ·∫©n ID g·ªëc n·∫øu kh√¥ng c·∫ßn
    res.json({ success: true, user });
  });
});

// API l·∫•y t·∫•t c·∫£ ph·∫£n h·ªìi
app.get('/api/phanhoi/all', (req, res) => {
    const query = `SELECT ID_DG, Noidung, TaoBoi FROM PhanHoi`;

    db.query(query, (err, results) => {
        if (err) {
            console.error("‚ùå L·ªói khi truy v·∫•n ph·∫£n h·ªìi:", err);
            return res.status(500).json({ success: false, message: "L·ªói truy v·∫•n ph·∫£n h·ªìi" });
        }

        res.json({ success: true, data: results });
    });
});


// API th√™m y√™u c·∫ßu t∆∞ v·∫•n
// API th√™m y√™u c·∫ßu t∆∞ v·∫•n
app.post('/api/yeucau', (req, res) => {
    const { name, email, phone, note, nguon = "Website", taoBoi = "Kh√°ch" } = req.body;

    const query = `
        INSERT INTO YeuCauTuVan (IDYeuCau, Ten, Email, SoDienThoai, NgayGuiYeuCau, NoiDungYeuCau, TrangThaiYeuCau, Nguon, TaoBoi)
        VALUES (?, ?, ?, ?, NOW(), ?, 'Ch∆∞a x·ª≠ l√Ω', ?, ?)
    `;

    const randomID = 'YC' + Math.floor(Math.random() * 1000000).toString().padStart(6, '0');

    db.query(query, [randomID, name, email, phone, note, nguon, taoBoi], (err, result) => {
        if (err) {
            console.error("‚ùå L·ªói khi th√™m y√™u c·∫ßu:", err);
            return res.status(500).json({ success: false, message: "L·ªói khi th√™m y√™u c·∫ßu" });
        }
        res.json({ success: true, message: "ƒê√£ l∆∞u y√™u c·∫ßu t∆∞ v·∫•n" });
    });
});


// PUT c·∫≠p nh·∫≠t ch·ªâ T·ªïng chi ph√≠
app.put("/api/baogia/update-cost", (req, res) => {
    const { ID_BG, Tongchiphi, ChinhSuaLanCuoiBoi } = req.body;

    if (!ID_BG || !Tongchiphi) {
        return res.status(400).json({ success: false, message: "Thi·∫øu ID_BG ho·∫∑c T·ªïng chi ph√≠" });
    }

    const ChinhSuaLanCuoiVaoLuc = new Date();

    const query = `
        UPDATE BaoGia
        SET Tongchiphi = ?,
            ChinhSuaLanCuoiVaoLuc = ?,
            ChinhSuaLanCuoiBoi = ?
        WHERE ID_BG = ?
    `;

    db.query(query, [Tongchiphi, ChinhSuaLanCuoiVaoLuc, ChinhSuaLanCuoiBoi, ID_BG], (err, result) => {
        if (err) {
            console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t chi ph√≠:", err.sqlMessage);
            return res.status(500).json({ success: false, message: "L·ªói c·∫≠p nh·∫≠t", error: err.sqlMessage });
        }

        res.json({ success: true, message: "‚úÖ ƒê√£ c·∫≠p nh·∫≠t t·ªïng chi ph√≠ th√†nh c√¥ng" });
    });
});



app.get("/api/baogia", (req, res) => {
    const query = "SELECT * FROM BaoGia ORDER BY Ngaytao DESC";
    db.query(query, (err, results) => {
        if (err) return res.status(500).json({ success: false, message: "L·ªói truy v·∫•n", error: err.sqlMessage });
        res.json({ success: true, data: results });
    });
});


// Th√™m b√°o gi√°
app.post("/api/baogia", (req, res) => {
    const { Ngaytao, ChitietDV, Tongchiphi, Trangthai, TaoBoi } = req.body;

    // T·∫°o ID b√°o gi√° theo ƒë·ªãnh d·∫°ng BGxx
    const getMaxIdQuery = "SELECT ID_BG FROM BaoGia ORDER BY ID_BG DESC LIMIT 1";

    db.query(getMaxIdQuery, (err, results) => {
        if (err) {
            console.error("‚ùå L·ªói khi l·∫•y ID_BG l·ªõn nh·∫•t:", err.sqlMessage);
            return res.status(500).json({ success: false, message: "L·ªói khi l·∫•y ID", error: err.sqlMessage });
        }

        let newIdNumber = 1;
        if (results.length > 0) {
            const lastId = results[0].ID_BG; // VD: "BG09"
            const lastNumber = parseInt(lastId.replace("BG", ""));
            newIdNumber = lastNumber + 1;
        }

        const ID_BG = `BG${newIdNumber.toString().padStart(2, "0")}`;
        const TaoVaoLuc = new Date();
        const ChinhSuaLanCuoiVaoLuc = null;
        const ChinhSuaLanCuoiBoi = null;

        const insertQuery = `
            INSERT INTO BaoGia (
                ID_BG, Ngaytao, ChitietDV, Tongchiphi, Trangthai,
                TaoVaoLuc, TaoBoi, ChinhSuaLanCuoiVaoLuc, ChinhSuaLanCuoiBoi
            )
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
        `;

        db.query(insertQuery, [
            ID_BG, Ngaytao, ChitietDV, Tongchiphi, Trangthai,
            TaoVaoLuc, TaoBoi, ChinhSuaLanCuoiVaoLuc, ChinhSuaLanCuoiBoi
        ], (err, result) => {
            if (err) {
                console.error("‚ùå L·ªói th√™m b√°o gi√°:", err.sqlMessage);
                return res.status(500).json({ success: false, message: "L·ªói th√™m d·ªØ li·ªáu", error: err.sqlMessage });
            }
            res.json({ success: true, message: "‚úÖ ƒê√£ th√™m b√°o gi√° th√†nh c√¥ng", ID_BG });
        });
    });
});


// C·∫≠p nh·∫≠t b√°o gi√°
app.put("/api/baogia/update", (req, res) => {
    const { ID_BG, Ngaytao, ChitietDV, Tongchiphi, Trangthai, ChinhSuaLanCuoiBoi } = req.body;

    if (!ID_BG) {
        return res.status(400).json({ success: false, message: "Thi·∫øu ID_BG ƒë·ªÉ c·∫≠p nh·∫≠t" });
    }

    const ChinhSuaLanCuoiVaoLuc = new Date();

    const query = `
        UPDATE BaoGia
        SET Ngaytao = ?, 
            ChitietDV = ?, 
            Tongchiphi = ?, 
            Trangthai = ?, 
            ChinhSuaLanCuoiVaoLuc = ?, 
            ChinhSuaLanCuoiBoi = ?
        WHERE ID_BG = ?
    `;

    db.query(query, [
        Ngaytao,
        ChitietDV,
        Tongchiphi,
        Trangthai,
        ChinhSuaLanCuoiVaoLuc,
        ChinhSuaLanCuoiBoi,
        ID_BG
    ], (err, result) => {
        if (err) {
            console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t b√°o gi√°:", err.sqlMessage);
            return res.status(500).json({ success: false, message: "L·ªói c·∫≠p nh·∫≠t d·ªØ li·ªáu", error: err.sqlMessage });
        }

        if (result.affectedRows === 0) {
            return res.status(404).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y b√°o gi√° v·ªõi ID ƒë√£ cho" });
        }

        res.json({ success: true, message: "‚úÖ ƒê√£ c·∫≠p nh·∫≠t b√°o gi√° th√†nh c√¥ng" });
    });
});

// GET k·∫øt h·ª£p BaoGia + HoSoGV
app.get("/api/baogia/giaovien", (req, res) => {
    const query = `
        SELECT 
            bg.ID_BG,
            bg.ID_GV,
            gv.HoTen,
            gv.BangCap,
            gv.QuocTich,
            gv.Email,
            gv.TrangThaiHSGV,
            bg.Ngaytao,
            bg.Tongchiphi,
            bg.TaoBoi,
            bg.ChinhSuaLanCuoiVaoLuc,
            bg.ChinhSuaLanCuoiBoi
        FROM BaoGia bg
        LEFT JOIN HoSoGV gv ON bg.ID_GV = gv.ID_GV
        ORDER BY bg.Ngaytao DESC
    `;

    db.query(query, (err, results) => {
        if (err) {
            console.error("‚ùå L·ªói truy v·∫•n:", err);
            return res.status(500).json({ success: false, message: "L·ªói truy v·∫•n", error: err.sqlMessage });
        }

        res.json({ success: true, data: results });
    });
});

app.get('/api/email-from-idkh/:idKH', (req, res) => {
    const idKH = req.params.idKH;
    const query = `SELECT Email FROM TaiKhoanNguoiDung WHERE ID_Nguoidung = ?`;

    db.query(query, [idKH], (err, results) => {
        if (err) {
            console.error("‚ùå L·ªói truy v·∫•n email:", err);
            return res.status(500).json({ success: false, message: "L·ªói truy v·∫•n" });
        }

        if (results.length === 0) {
            return res.status(404).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y email" });
        }

        res.json({ success: true, email: results[0].Email });
    });
});


// API l·∫•y to√†n b·ªô h·ª£p ƒë·ªìng (cho Admin/Nh√¢n vi√™n)
app.get('/api/hopdong/all', (req, res) => {
    const query = `
        SELECT *
        FROM HopDong
        ORDER BY Ngaybatdau DESC
    `;

    db.query(query, (err, results) => {
        if (err) {
            console.error("‚ùå L·ªói khi truy v·∫•n t·∫•t c·∫£ h·ª£p ƒë·ªìng:", err);
            return res.status(500).json({ success: false, message: "L·ªói truy v·∫•n h·ª£p ƒë·ªìng" });
        }

        res.json({ success: true, data: results });
    });
});

// API l·∫•y h·ª£p ƒë·ªìng theo ID kh√°ch h√†ng
app.get('/api/hopdong/:idKH', (req, res) => {
    const { idKH } = req.params;

    const query = `
        SELECT ID_HDong, TenHDong, GiatriHDong, Ngaybatdau, Ngayketthuc, Trangthai
        FROM HopDong
        WHERE ID_KH = ?
    `;

    db.query(query, [idKH], (err, results) => {
        if (err) {
            console.error("‚ùå L·ªói khi truy v·∫•n h·ª£p ƒë·ªìng:", err);
            return res.status(500).json({ success: false, message: "L·ªói truy v·∫•n" });
        }

        res.json({ success: true, data: results });
    });
});




app.get("/api/hosogv", (req, res) => {
    const query = "SELECT * FROM HoSoGV WHERE TrangThaiHSGV = 'ƒê√£ duy·ªát'";
    db.query(query, (err, results) => {
        if (err) {
            console.error("‚ùå L·ªói truy v·∫•n:", err);
            return res.status(500).json({ success: false, message: "L·ªói truy v·∫•n" });
        }
        res.json(results);
    });
});





app.post('/api/hopdong', (req, res) => {
    const {
        ID_KH,
        ID_NV, // üëà v·∫´n gi·ªØ n·∫øu b·∫°n ƒëang truy·ªÅn t·ª´ frontend
        TenHDong,
        GiatriHDong,
        Ngaybatdau,
        Ngayketthuc,
        TaoBoi
    } = req.body;

    // üëâ T·∫°o ID_HDong ng·∫´u nhi√™n d·∫°ng HDxxxxxx
    const ID_HDong = 'HD' + Math.floor(Math.random() * 1000000).toString().padStart(6, '0');

    const query = `
        INSERT INTO HopDong (
            ID_HDong,
            ID_KH,
            ID_NV,
            TenHDong,
            GiatriHDong,
            Ngaybatdau,
            Ngayketthuc,
            Trangthai,
            TaoVaoLuc,
            TaoBoi
        )
        VALUES (?, ?, ?, ?, ?, ?, ?, 'Ch·ªù duy·ªát', NOW(), ?)
    `;

    db.query(query, [
        ID_HDong,
        ID_KH,
        ID_NV,             // üëà l∆∞u l·∫°i ƒë√∫ng ng∆∞·ªùi ƒëang t·∫°o
        TenHDong,
        GiatriHDong,
        Ngaybatdau,
        Ngayketthuc,
        TaoBoi
    ], (err, result) => {
        if (err) {
            console.error("‚ùå L·ªói khi th√™m h·ª£p ƒë·ªìng:", err);
            return res.status(500).json({ success: false, message: "L·ªói truy v·∫•n" });
        }

        res.json({
            success: true,
            message: "‚úÖ H·ª£p ƒë·ªìng ƒë√£ ƒë∆∞·ª£c th√™m!",
            ID_HDong // tr·∫£ l·∫°i ID n·∫øu frontend c·∫ßn
        });
    });
});

// ‚úÖ API cho ph√©p Admin/Nh√¢n vi√™n c·∫≠p nh·∫≠t tr·∫°ng th√°i h·ª£p ƒë·ªìng
app.put('/api/hopdong/update-status/:id', (req, res) => {
    const { id } = req.params;
    const { Trangthai, ChinhSuaLanCuoiBoi } = req.body;

    const query = `
        UPDATE HopDong
        SET Trangthai = ?, 
            ChinhSuaLanCuoiVaoLuc = NOW(),
            ChinhSuaLanCuoiBoi = ?
        WHERE ID_HDong = ?
    `;

    db.query(query, [Trangthai, ChinhSuaLanCuoiBoi, id], (err, result) => {
        if (err) {
            console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i h·ª£p ƒë·ªìng:", err);
            return res.status(500).json({ success: false, message: "L·ªói c·∫≠p nh·∫≠t tr·∫°ng th√°i" });
        }

        res.json({ success: true, message: "‚úÖ Tr·∫°ng th√°i h·ª£p ƒë·ªìng ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t!" });
    });
});


// API l·∫•y to√†n b·ªô ƒë√°nh gi√° (cho Admin v√† Nh√¢n vi√™n)
app.get('/api/danhgia/all', (req, res) => {
    const query = `SELECT * FROM DanhGia ORDER BY TaoVaoLuc DESC`;

    db.query(query, (err, results) => {
        if (err) {
            console.error("‚ùå L·ªói khi truy v·∫•n ƒë√°nh gi√°:", err);
            return res.status(500).json({ success: false, message: "L·ªói truy v·∫•n ƒë√°nh gi√°" });
        }

        res.json({ success: true, data: results });
    });
});

app.post("/api/phanhoi", (req, res) => {
    const { ID_DG, ID_NV, Noidung, TaoBoi } = req.body;

    // Ghi log ƒë·∫ßu v√†o
    console.log("üì• Nh·∫≠n d·ªØ li·ªáu ph·∫£n h·ªìi:", req.body);

    // Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßy ƒë·ªß ch∆∞a
    if (!ID_DG || !ID_NV || !Noidung || !TaoBoi) {
        return res.status(400).json({
            success: false,
            message: "‚ùå Thi·∫øu th√¥ng tin ph·∫£n h·ªìi.",
            missing: {
                ID_DG: !!ID_DG,
                ID_NV: !!ID_NV,
                Noidung: !!Noidung,
                TaoBoi: !!TaoBoi,
            },
        });
    }

    const checkQuery = "SELECT * FROM PhanHoi WHERE ID_DG = ?";
    db.query(checkQuery, [ID_DG], (err, results) => {
        if (err) {
            console.error("‚ùå L·ªói ki·ªÉm tra ph·∫£n h·ªìi:", err);
            return res.status(500).json({ success: false, message: "L·ªói ki·ªÉm tra ph·∫£n h·ªìi", error: err.message });
        }

        if (results.length > 0) {
            // C·∫≠p nh·∫≠t n·∫øu ƒë√£ c√≥ ph·∫£n h·ªìi
            const updateQuery = `
                UPDATE PhanHoi
                SET Noidung = ?, ChinhSuaLanCuoiVaoLuc = NOW(), ChinhSuaLanCuoiBoi = ?
                WHERE ID_DG = ?
            `;
            db.query(updateQuery, [Noidung, TaoBoi, ID_DG], (err2) => {
                if (err2) {
                    console.error("‚ùå L·ªói c·∫≠p nh·∫≠t ph·∫£n h·ªìi:", err2);
                    return res.status(500).json({ success: false, message: "L·ªói c·∫≠p nh·∫≠t ph·∫£n h·ªìi", error: err2.message });
                }
                return res.json({ success: true, message: "‚úÖ Ph·∫£n h·ªìi ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t!" });
            });
        } else {
            // T·∫°o ID ph·∫£n h·ªìi m·ªõi
            const ID_PH = "PH" + Math.floor(Math.random() * 1000000).toString().padStart(6, "0");
            console.log("üÜî T·∫°o ID_PH m·ªõi:", ID_PH);

            const insertQuery = `
                INSERT INTO PhanHoi
                (ID_PH, ID_DG, ID_NV, Noidung, TaoVaoLuc, TaoBoi, ChinhSuaLanCuoiVaoLuc, ChinhSuaLanCuoiBoi)
                VALUES (?, ?, ?, ?, NOW(), ?, NOW(), ?)
            `;

            db.query(insertQuery, [ID_PH, ID_DG, ID_NV, Noidung, TaoBoi, TaoBoi], (err3) => {
                if (err3) {
                    console.error("‚ùå L·ªói th√™m ph·∫£n h·ªìi:", err3);
                    return res.status(500).json({ success: false, message: "L·ªói th√™m ph·∫£n h·ªìi", error: err3.message });
                }

                return res.json({ success: true, message: "‚úÖ Ph·∫£n h·ªìi ƒë√£ ƒë∆∞·ª£c l∆∞u!" });
            });
        }
    });
});


app.get('/api/khachhang/all', (req, res) => {
    const query = `
        SELECT * FROM KhachHang
        ORDER BY TaoVaoLuc DESC
    `;

    db.query(query, (err, results) => {
        if (err) {
            console.error("‚ùå L·ªói truy v·∫•n kh√°ch h√†ng:", err);
            return res.status(500).json({ success: false, message: "L·ªói truy v·∫•n kh√°ch h√†ng" });
        }

        res.json({ success: true, data: results });
    });
});


app.post('/api/khachhang', (req, res) => {
    const {
        HoKH, TenlotKH, TenKH, Chucvu, Tendonvi, Diachi, Email,
        SDT, TrangthaiKH, Ghichu, TaoBoi
    } = req.body;

    const getLatestIdQuery = `
        SELECT ID_KH FROM KhachHang
        WHERE ID_KH LIKE 'KH%'
        ORDER BY ID_KH DESC
        LIMIT 1
    `;

    db.query(getLatestIdQuery, (err, results) => {
        if (err) {
            console.error("‚ùå L·ªói khi l·∫•y ID cu·ªëi:", err);
            return res.status(500).json({ success: false, message: "L·ªói t·∫°o m√£ ID." });
        }

        let newId = "KH001";
        if (results.length > 0) {
            const lastId = results[0].ID_KH;
            const nextNum = parseInt(lastId.replace("KH", "")) + 1;
            newId = "KH" + nextNum.toString().padStart(3, "0");
        }

        const insertQuery = `
            INSERT INTO KhachHang (
                ID_KH, HoKH, TenlotKH, TenKH, Chucvu, Tendonvi, Diachi, Email,
                SDT, NgaytaoKH, TrangthaiKH, Ghichu, TaoVaoLuc, TaoBoi
            )
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, CURDATE(), ?, ?, NOW(), ?)
        `;

        db.query(insertQuery, [
            newId, HoKH, TenlotKH, TenKH, Chucvu, Tendonvi, Diachi,
            Email, SDT, TrangthaiKH, Ghichu, TaoBoi
        ], (err, result) => {
            if (err) {
                console.error("‚ùå L·ªói khi th√™m kh√°ch h√†ng:", err);
                return res.status(500).json({ success: false, message: "L·ªói th√™m kh√°ch h√†ng" });
            }

            res.json({ success: true, message: "‚úÖ T·∫°o kh√°ch h√†ng th√†nh c√¥ng", ID_KH: newId });
        });
    });
});




app.put('/api/khachhang/update', (req, res) => {
    const {
        ID_KH, HoKH, TenlotKH, TenKH, Chucvu, Tendonvi, Diachi, Email,
        SDT, TrangthaiKH, Ghichu, ChinhSuaLanCuoiBoi
    } = req.body;

    const updateQuery = `
        UPDATE KhachHang
        SET HoKH = ?, TenlotKH = ?, TenKH = ?, Chucvu = ?, Tendonvi = ?, Diachi = ?,
            Email = ?, SDT = ?, TrangthaiKH = ?, Ghichu = ?, 
            ChinhSuaLanCuoiVaoLuc = NOW(), ChinhSuaLanCuoiBoi = ?
        WHERE ID_KH = ?
    `;

    db.query(updateQuery, [
        HoKH, TenlotKH, TenKH, Chucvu, Tendonvi, Diachi,
        Email, SDT, TrangthaiKH, Ghichu, ChinhSuaLanCuoiBoi, ID_KH
    ], (err, result) => {
        if (err) {
            console.error("‚ùå L·ªói c·∫≠p nh·∫≠t kh√°ch h√†ng:", err);
            return res.status(500).json({ success: false });
        }
        res.json({ success: true });
    });
});




app.post('/api/danhgia', (req, res) => {
    const { ID_KH, ID_HDong, Noidung, Sosao, TaoBoi } = req.body;

    // Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
    if (!ID_KH || !ID_HDong || !Noidung || !Sosao || !TaoBoi) {
        return res.status(400).json({
            success: false,
            message: "Thi·∫øu th√¥ng tin ƒë√°nh gi√°. Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß."
        });
    }

    // Sinh m√£ ID_DG duy nh·∫•t
    const ID_DG = 'DG' + Math.floor(Math.random() * 1000000).toString().padStart(6, '0');

    const query = `
        INSERT INTO DanhGia 
        (ID_DG, ID_KH, ID_HDong, Noidung, Sosao, TaoVaoLuc, TaoBoi, ChinhSuaLanCuoiVaoLuc, ChinhSuaLanCuoiBoi)
        VALUES (?, ?, ?, ?, ?, NOW(), ?, NOW(), ?)
    `;

    const values = [ID_DG, ID_KH, ID_HDong, Noidung, Sosao, TaoBoi, TaoBoi];

    db.query(query, values, (err, result) => {
        if (err) {
            console.error("‚ùå L·ªói khi l∆∞u ƒë√°nh gi√°:", err);
            return res.status(500).json({
                success: false,
                message: "L·ªói khi l∆∞u ƒë√°nh gi√° v√†o c∆° s·ªü d·ªØ li·ªáu."
            });
        }

        res.json({
            success: true,
            message: "‚úÖ ƒê√°nh gi√° ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng!"
        });
    });
});



app.get('/api/danhgia/:idKH', (req, res) => {
    const { idKH } = req.params;
    const query = `SELECT * FROM DanhGia WHERE ID_KH = ?`;
    db.query(query, [idKH], (err, results) => {
        if (err) return res.status(500).json({ success: false });
        res.json({ success: true, data: results });
    });
});

app.post('/api/check-password', (req, res) => {
    const { ID_Nguoidung, Matkhau } = req.body;

    const query = `
        SELECT * FROM TaiKhoanNguoiDung
        WHERE ID_Nguoidung = ? AND Matkhau = ?
    `;

    db.query(query, [ID_Nguoidung, Matkhau], (err, results) => {
        if (err) return res.status(500).json({ success: false, message: err.message });
        if (results.length === 0) return res.json({ success: false });

        return res.json({ success: true });
    });
});

// ƒê·∫£m b·∫£o b·∫°n ƒë√£ k·∫øt n·ªëi MySQL th√†nh c√¥ng v√†o bi·∫øn `db`

app.get("/api/khachhangtiemnang", (req, res) => {
    const query = "SELECT * FROM KhachHangTiemNang ORDER BY TaoVaoLuc DESC";

    db.query(query, (err, results) => {
        if (err) {
            console.error("‚ùå L·ªói truy v·∫•n kh√°ch h√†ng ti·ªÅm nƒÉng:", err);
            return res.status(500).json({ success: false, message: "L·ªói truy v·∫•n" });
        }

        res.json({ success: true, data: results });
    });
});

app.post("/api/khachhangtiemnang", (req, res) => {
    const {
        HoKHTN,
        TenLotKHTN,
        TenKHTN,
        ChucVu,
        TenDonVi,
        DiaChi,
        Email,
        SoDienThoai,
        IDNhanVien,
        GhiChu,
        TaoBoi
    } = req.body;

    // 1. T√¨m IDKHTN m·ªõi
    const getNextID = (callback) => {
        const idQuery = `
            SELECT IDKHTN FROM KhachHangTiemNang
            WHERE IDKHTN LIKE 'KHTN%'
            ORDER BY IDKHTN DESC
            LIMIT 1
        `;
        db.query(idQuery, (err, results) => {
            if (err) {
                return callback(err);
            }

            let nextNumber = 2; // m·∫∑c ƒë·ªãnh l√† 02 n·∫øu ch∆∞a c√≥ ai
            if (results.length > 0) {
                const lastID = results[0].IDKHTN; // VD: "KHTN09"
                const numericPart = parseInt(lastID.replace("KHTN", ""), 10);
                nextNumber = numericPart + 1;
            }

            const newID = `KHTN${nextNumber.toString().padStart(3, "0")}`; // v√≠ d·ª•: "KHTN02", "KHTN10"
            callback(null, newID);
        });
    };

    getNextID((err, IDKHTN) => {
        if (err) {
            console.error("‚ùå L·ªói khi l·∫•y ID:", err);
            return res.status(500).json({ success: false, message: "L·ªói t·∫°o ID kh√°ch h√†ng" });
        }

        const NgayTaoKHTN = new Date();
        const TaoVaoLuc = new Date();

        const query = `
            INSERT INTO KhachHangTiemNang (
                IDKHTN, HoKHTN, TenLotKHTN, TenKHTN,
                ChucVu, TenDonVi, DiaChi, Email, SoDienThoai,
                IDNhanVien, GhiChu, NgayTaoKHTN, TaoVaoLuc, TaoBoi
            )
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        `;

        const values = [
            IDKHTN,
            HoKHTN,
            TenLotKHTN,
            TenKHTN,
            ChucVu,
            TenDonVi,
            DiaChi,
            Email,
            SoDienThoai,
            IDNhanVien,
            GhiChu,
            NgayTaoKHTN,
            TaoVaoLuc,
            TaoBoi
        ];

        db.query(query, values, (err, result) => {
            if (err) {
                console.error("‚ùå L·ªói khi th√™m kh√°ch h√†ng ti·ªÅm nƒÉng:", err);
                return res.status(500).json({ success: false, message: "L·ªói th√™m d·ªØ li·ªáu" });
            }

            res.json({ success: true, message: "ƒê√£ th√™m kh√°ch h√†ng ti·ªÅm nƒÉng th√†nh c√¥ng" });
        });
    });
});



app.put("/api/khachhangtiemnang/update", (req, res) => {
    const {
        IDKHTN,
        HoKHTN,
        TenLotKHTN,
        TenKHTN,
        ChucVu,
        TenDonVi,
        DiaChi,
        Email,
        SoDienThoai,
        IDNhanVien,
        GhiChu,
        ChinhSuaLanCuoiBoi
    } = req.body;

    if (!IDKHTN) {
        return res.status(400).json({ success: false, message: "Thi·∫øu IDKHTN ƒë·ªÉ c·∫≠p nh·∫≠t" });
    }

    const ChinhSuaLanCuoiVaoLuc = new Date();

    const query = `
        UPDATE KhachHangTiemNang
        SET
            HoKHTN = ?, TenLotKHTN = ?, TenKHTN = ?,
            ChucVu = ?, TenDonVi = ?, DiaChi = ?, Email = ?,
            SoDienThoai = ?, IDNhanVien = ?, GhiChu = ?,
            ChinhSuaLanCuoiVaoLuc = ?, ChinhSuaLanCuoiBoi = ?
        WHERE IDKHTN = ?
    `;

    const values = [
        HoKHTN,
        TenLotKHTN,
        TenKHTN,
        ChucVu,
        TenDonVi,
        DiaChi,
        Email,
        SoDienThoai,
        IDNhanVien,
        GhiChu,
        ChinhSuaLanCuoiVaoLuc,
        ChinhSuaLanCuoiBoi,
        IDKHTN
    ];

    db.query(query, values, (err, result) => {
        if (err) {
            console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t kh√°ch h√†ng ti·ªÅm nƒÉng:", err);
            return res.status(500).json({ success: false, message: "L·ªói c·∫≠p nh·∫≠t d·ªØ li·ªáu" });
        }

        res.json({ success: true, message: "‚úÖ C·∫≠p nh·∫≠t th√†nh c√¥ng" });
    });
});

app.delete("/api/khachhangtiemnang/:id", (req, res) => {
    const id = req.params.id;

    const query = "DELETE FROM KhachHangTiemNang WHERE IDKHTN = ?";

    db.query(query, [id], (err, result) => {
        if (err) {
            console.error("‚ùå L·ªói khi xo√° kh√°ch h√†ng ti·ªÅm nƒÉng:", err);
            return res.status(500).json({ success: false, message: "L·ªói xo√° d·ªØ li·ªáu" });
        }

        res.json({ success: true, message: "‚úÖ ƒê√£ xo√° kh√°ch h√†ng th√†nh c√¥ng" });
    });
});

// L·∫•y danh s√°ch ho·∫°t ƒë·ªông kh√°ch h√†ng ti·ªÅm nƒÉng
app.get("/api/hoatdongtiemnang", (req, res) => {
    const query = "SELECT * FROM HoatDongKhachHangTiemNang ORDER BY Ngaythuchien DESC";
    db.query(query, (err, results) => {
        if (err) {
            console.error("‚ùå L·ªói truy v·∫•n ho·∫°t ƒë·ªông:", err);
            return res.status(500).json({ success: false, message: "L·ªói truy v·∫•n" });
        }
        res.json({ success: true, data: results });
    });
});

// Th√™m ho·∫°t ƒë·ªông kh√°ch h√†ng ti·ªÅm nƒÉng
app.post("/api/hoatdongtiemnang", (req, res) => {
    const { ID_KH, ID_NV, Ngaythuchien, NoidungHD, Ghichu, Trangthai } = req.body;

    // Truy v·∫•n l·∫•y ID_HDKHTN l·ªõn nh·∫•t hi·ªán t·∫°i
    const getMaxIdQuery = "SELECT ID_HDKHTN FROM HoatDongKhachHangTiemNang ORDER BY ID_HDKHTN DESC LIMIT 1";

    db.query(getMaxIdQuery, (err, results) => {
        if (err) {
            console.error("‚ùå L·ªói khi l·∫•y ID l·ªõn nh·∫•t:", err.sqlMessage);
            return res.status(500).json({ success: false, message: "L·ªói khi l·∫•y ID", error: err.sqlMessage });
        }

        let newIdNumber = 1; // m·∫∑c ƒë·ªãnh n·∫øu ch∆∞a c√≥ ID n√†o
        if (results.length > 0) {
            const lastId = results[0].ID_HDKHTN; // VD: "KHTN09"
            const lastNumber = parseInt(lastId.replace("HDKHTN", ""));
            newIdNumber = lastNumber + 1;
        }

        const ID_HDKHTN = `HDKHTN${newIdNumber.toString().padStart(3, "0")}`; // VD: KHTN02, KHTN10

        const insertQuery = `
            INSERT INTO HoatDongKhachHangTiemNang 
            (ID_HDKHTN, ID_KH, ID_NV, Ngaythuchien, NoidungHD, Ghichu, Trangthai)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        `;

        db.query(insertQuery, [ID_HDKHTN, ID_KH, ID_NV, Ngaythuchien, NoidungHD, Ghichu, Trangthai], (err, result) => {
            if (err) {
                console.error("‚ùå L·ªói th√™m ho·∫°t ƒë·ªông:", err.sqlMessage);
                return res.status(500).json({ success: false, message: "L·ªói th√™m d·ªØ li·ªáu", error: err.sqlMessage });
            }
            res.json({ success: true, message: "ƒê√£ th√™m ho·∫°t ƒë·ªông th√†nh c√¥ng", ID_HDKHTN });
        });
    });
});


// Xo√° ho·∫°t ƒë·ªông kh√°ch h√†ng ti·ªÅm nƒÉng
app.delete("/api/hoatdongtiemnang/:id", (req, res) => {
    const { id } = req.params;
    const query = "DELETE FROM HoatDongKhachHangTiemNang WHERE ID_HDKHTN = ?";
    db.query(query, [id], (err, result) => {
        if (err) {
            console.error("‚ùå L·ªói xo√° ho·∫°t ƒë·ªông:", err.sqlMessage);
            return res.status(500).json({ success: false, message: "L·ªói xo√° d·ªØ li·ªáu", error: err.sqlMessage });
        }
        res.json({ success: true, message: "ƒê√£ xo√° th√†nh c√¥ng" });
    });
});




app.get('/api/yeucau/ghichu/:id', (req, res) => {
    const { id } = req.params;

    const query = `
        SELECT GhiChu
        FROM YeuCauTuVan
        WHERE IDYeuCau = ?
    `;

    db.query(query, [id], (err, results) => {
        if (err) {
            console.error("‚ùå L·ªói khi truy v·∫•n ghi ch√∫:", err);
            return res.status(500).json({ success: false, message: "L·ªói truy v·∫•n ghi ch√∫" });
        }

        if (results.length === 0) {
            return res.status(404).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y y√™u c·∫ßu" });
        }

        const note = results[0].GhiChu;
        res.json({ success: true, GhiChu: note || null });
    });
});

app.delete('/api/khachhang/:id', (req, res) => {
    const id = req.params.id;
    const query = "DELETE FROM KhachHang WHERE ID_KH = ?";

    db.query(query, [id], (err, result) => {
        if (err) {
            console.error("‚ùå L·ªói khi x√≥a kh√°ch h√†ng:", err);
            return res.status(500).json({ success: false, message: "L·ªói x√≥a kh√°ch h√†ng" });
        }
        res.json({ success: true, message: "‚úÖ X√≥a kh√°ch h√†ng th√†nh c√¥ng" });
    });
});


app.get('/api/hoatdongkh', (req, res) => {
    const query = `
        SELECT IDHoatDongKH, IDKhachHang, NoiDungHoatDong 
        FROM HoatDongKhachHang
        ORDER BY IDHoatDongKH DESC
    `;
    db.query(query, (err, results) => {
        if (err) {
            console.error("‚ùå L·ªói khi truy v·∫•n ho·∫°t ƒë·ªông kh√°ch h√†ng:", err);
            return res.status(500).json({ success: false, message: "L·ªói truy v·∫•n" });
        }
        res.json({ success: true, data: results });
    });
});


app.post('/api/hoatdongkh', (req, res) => {
    const { IDKhachHang, NoiDungHoatDong } = req.body;

    if (!IDKhachHang || !NoiDungHoatDong) {
        return res.status(400).json({ success: false, message: "Thi·∫øu th√¥ng tin" });
    }

    const IDHoatDongKH = 'HD' + Math.floor(Math.random() * 1000000).toString().padStart(6, '0');
    const query = `
        INSERT INTO HoatDongKhachHang (IDHoatDongKH, IDKhachHang, NoiDungHoatDong)
        VALUES (?, ?, ?)
    `;

    db.query(query, [IDHoatDongKH, IDKhachHang, NoiDungHoatDong], (err, result) => {
        if (err) {
            console.error("‚ùå L·ªói th√™m ho·∫°t ƒë·ªông:", err);
            return res.status(500).json({ success: false });
        }

        res.json({ success: true });
    });
});


app.put('/api/yeucau/update-status/:id', (req, res) => {
    const { id } = req.params;
    const { TrangThaiYeuCau, ChinhSuaLanCuoiBoi, GhiChu } = req.body;

    const query = `
        UPDATE YeuCauTuVan
        SET TrangThaiYeuCau = ?, 
            GhiChu = ?,
            ChinhSuaLanCuoiVaoLuc = NOW(),
            ChinhSuaLanCuoiBoi = ?
        WHERE IDYeuCau = ?
    `;

    db.query(query, [TrangThaiYeuCau, GhiChu, ChinhSuaLanCuoiBoi, id], (err, result) => {
        if (err) {
            console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i y√™u c·∫ßu:", err);
            return res.status(500).json({ success: false, message: "L·ªói khi c·∫≠p nh·∫≠t" });
        }

        res.json({ success: true, message: "‚úÖ C·∫≠p nh·∫≠t th√†nh c√¥ng!" });
    });
});

// API th·ªëng k√™ t·ªïng h·ª£p
app.get('/api/baocao/thongke', (req, res) => {
    const query = `
        SELECT 
            (SELECT COUNT(*) FROM KhachHang) AS SoLuongKH,
            (SELECT COUNT(*) FROM KhachHangTiemNang) AS SoLuongKHTN,
            (SELECT IFNULL(SUM(GiatriHDong), 0) FROM HopDong) AS GiaTriHopDong,
            (SELECT COUNT(*) FROM YeuCauTuVan) AS SoLuongYC
    `;

    db.query(query, (err, results) => {
        if (err) {
            console.error("‚ùå L·ªói khi th·ªëng k√™:", err);
            return res.status(500).json({ success: false, message: "L·ªói th·ªëng k√™" });
        }

        res.json({ success: true, data: results[0] });
    });
});




app.put('/api/change-password', (req, res) => {
    const { ID_Nguoidung, Matkhau } = req.body;

    const query = `
        UPDATE TaiKhoanNguoiDung
        SET Matkhau = ?, ChinhSuaLanCuoiVaoLuc = NOW()
        WHERE ID_Nguoidung = ?
    `;

    db.query(query, [Matkhau, ID_Nguoidung], (err, result) => {
        if (err) return res.status(500).json({ success: false, message: err.message });

        res.json({ success: true });
    });
});


app.put("/api/yeucau/tiepnhan/:id", (req, res) => {
    const { IDNhanVienTiepNhan, TrangThaiYeuCau, ChinhSuaLanCuoiBoi } = req.body;
    const id = req.params.id;

    const query = `
      UPDATE YeuCauTuVan
      SET IDNhanVienTiepNhan = ?, TrangThaiYeuCau = ?, ChinhSuaLanCuoiBoi = ?
      WHERE IDYeuCau = ?
    `;
    db.query(query, [IDNhanVienTiepNhan, TrangThaiYeuCau, ChinhSuaLanCuoiBoi, id], (err, result) => {
        if (err) {
            console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t y√™u c·∫ßu t∆∞ v·∫•n:", err);
            return res.json({ success: false, message: "L·ªói server" });
        }
        res.json({ success: true });
    });
});





// ‚úÖ API l·∫•y to√†n b·ªô y√™u c·∫ßu t∆∞ v·∫•n (d√†nh cho Admin ho·∫∑c Nh√¢n vi√™n)
app.get('/api/yeucau/all', (req, res) => {
    const query = `
        SELECT *
        FROM YeuCauTuVan
        ORDER BY NgayGuiYeuCau DESC
    `;

    db.query(query, (err, results) => {
        if (err) {
            console.error("‚ùå L·ªói khi truy v·∫•n t·∫•t c·∫£ y√™u c·∫ßu:", err);
            return res.status(500).json({ success: false, message: "L·ªói khi truy v·∫•n t·∫•t c·∫£ y√™u c·∫ßu" });
        }

        res.json({ success: true, data: results });
    });
});

// API l·∫•y danh s√°ch y√™u c·∫ßu t∆∞ v·∫•n theo email ng∆∞·ªùi d√πng
app.get('/api/yeucau/email/:email', (req, res) => {
    const { email } = req.params;

    const query = `
        SELECT *
        FROM YeuCauTuVan
        WHERE Email = ?
        ORDER BY NgayGuiYeuCau DESC
    `;

    db.query(query, [email], (err, results) => {
        if (err) {
            console.error("‚ùå L·ªói khi truy v·∫•n y√™u c·∫ßu t∆∞ v·∫•n:", err);
            return res.status(500).json({ success: false, message: "L·ªói truy v·∫•n y√™u c·∫ßu t∆∞ v·∫•n" });
        }

        res.json({ success: true, data: results });
    });
});

app.get('/api/yeucau/taoboi/:idkh', (req, res) => {
    const { idkh } = req.params;
    const query = `
        SELECT * FROM YeuCauTuVan
        WHERE TaoBoi = ?
        ORDER BY NgayGuiYeuCau DESC
    `;
    db.query(query, [idkh], (err, results) => {
        if (err) {
            console.error("‚ùå L·ªói truy v·∫•n y√™u c·∫ßu:", err);
            return res.status(500).json({ success: false, message: "L·ªói truy v·∫•n" });
        }
        res.json({ success: true, data: results });
    });
});


app.listen(5000, () => {
  console.log('üöÄ Backend ƒëang ch·∫°y t·∫°i http://localhost:5000');
});
